// This file was auto-generated by Fern from our API Definition.

package shell

import (
	context "context"
	sandboxsdkgo "github.com/agent-infra/sandbox-sdk-go"
	core "github.com/agent-infra/sandbox-sdk-go/core"
	internal "github.com/agent-infra/sandbox-sdk-go/internal"
	option "github.com/agent-infra/sandbox-sdk-go/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Execute command in the specified shell session
// Supports SSE streaming if Accept header contains 'text/event-stream'
func (c *Client) ExecCommand(
	ctx context.Context,
	request *sandboxsdkgo.ShellExecRequest,
	opts ...option.RequestOption,
) (*sandboxsdkgo.ResponseShellCommandResult, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"",
	)
	endpointURL := baseURL + "/v1/shell/exec"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		422: func(apiError *core.APIError) error {
			return &sandboxsdkgo.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}

	var response *sandboxsdkgo.ResponseShellCommandResult
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// View output of the specified shell session
// Supports SSE streaming if Accept header contains 'text/event-stream'
func (c *Client) ViewShell(
	ctx context.Context,
	request *sandboxsdkgo.ShellViewRequest,
	opts ...option.RequestOption,
) (*sandboxsdkgo.ResponseShellViewResult, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"",
	)
	endpointURL := baseURL + "/v1/shell/view"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		422: func(apiError *core.APIError) error {
			return &sandboxsdkgo.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}

	var response *sandboxsdkgo.ResponseShellViewResult
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Wait for the process in the specified shell session to return
func (c *Client) WaitForProcess(
	ctx context.Context,
	request *sandboxsdkgo.ShellWaitRequest,
	opts ...option.RequestOption,
) (*sandboxsdkgo.ResponseShellWaitResult, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"",
	)
	endpointURL := baseURL + "/v1/shell/wait"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		422: func(apiError *core.APIError) error {
			return &sandboxsdkgo.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}

	var response *sandboxsdkgo.ResponseShellWaitResult
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Write input to the process in the specified shell session
func (c *Client) WriteToProcess(
	ctx context.Context,
	request *sandboxsdkgo.ShellWriteToProcessRequest,
	opts ...option.RequestOption,
) (*sandboxsdkgo.ResponseShellWriteResult, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"",
	)
	endpointURL := baseURL + "/v1/shell/write"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		422: func(apiError *core.APIError) error {
			return &sandboxsdkgo.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}

	var response *sandboxsdkgo.ResponseShellWriteResult
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Terminate the process in the specified shell session
func (c *Client) KillProcess(
	ctx context.Context,
	request *sandboxsdkgo.ShellKillProcessRequest,
	opts ...option.RequestOption,
) (*sandboxsdkgo.ResponseShellKillResult, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"",
	)
	endpointURL := baseURL + "/v1/shell/kill"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		422: func(apiError *core.APIError) error {
			return &sandboxsdkgo.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}

	var response *sandboxsdkgo.ResponseShellKillResult
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Create a new shell session and return its ID
func (c *Client) CreateSession(
	ctx context.Context,
	request *sandboxsdkgo.ShellCreateSessionRequest,
	opts ...option.RequestOption,
) (*sandboxsdkgo.ResponseShellCreateSessionResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"",
	)
	endpointURL := baseURL + "/v1/shell/sessions/create"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		422: func(apiError *core.APIError) error {
			return &sandboxsdkgo.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}

	var response *sandboxsdkgo.ResponseShellCreateSessionResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Create a new shell session and return the terminal URL
func (c *Client) GetTerminalUrl(
	ctx context.Context,
	opts ...option.RequestOption,
) (*sandboxsdkgo.ResponseStr, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"",
	)
	endpointURL := baseURL + "/v1/shell/terminal-url"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *sandboxsdkgo.ResponseStr
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// List all active shell sessions
func (c *Client) ListSessions(
	ctx context.Context,
	opts ...option.RequestOption,
) (*sandboxsdkgo.ResponseActiveShellSessionsResult, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"",
	)
	endpointURL := baseURL + "/v1/shell/sessions"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *sandboxsdkgo.ResponseActiveShellSessionsResult
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Cleanup all active shell sessions
func (c *Client) CleanupAllSessions(
	ctx context.Context,
	opts ...option.RequestOption,
) (*sandboxsdkgo.Response, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"",
	)
	endpointURL := baseURL + "/v1/shell/sessions"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *sandboxsdkgo.Response
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Manually cleanup a specific shell session
func (c *Client) CleanupSession(
	ctx context.Context,
	sessionId string,
	opts ...option.RequestOption,
) (*sandboxsdkgo.Response, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v1/shell/sessions/%v",
		sessionId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		422: func(apiError *core.APIError) error {
			return &sandboxsdkgo.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}

	var response *sandboxsdkgo.Response
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
