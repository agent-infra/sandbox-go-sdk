// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/agent-infra/sandbox-sdk-go/internal"
	time "time"
)

type ShellCreateSessionRequest struct {
	// Working directory for the new session (must use absolute path)
	ExecDir *string `json:"exec_dir,omitempty" url:"-"`
}

type ShellExecRequest struct {
	// Unique identifier of the target shell session, if not provided, one will be automatically created
	Id *string `json:"id,omitempty" url:"-"`
	// Working directory for command execution (must use absolute path)
	ExecDir *string `json:"exec_dir,omitempty" url:"-"`
	// Shell command to execute
	Command string `json:"command" url:"-"`
	// Whether to execute command asynchronously (default: False for async, False for synchronous execution)
	AsyncMode *bool `json:"async_mode,omitempty" url:"-"`
}

type ShellKillProcessRequest struct {
	// Unique identifier of the target shell session
	Id string `json:"id" url:"-"`
}

// Active shell sessions result
type ActiveShellSessionsResult struct {
	// Map of session ID to session info
	Sessions map[string]*ShellSessionInfo `json:"sessions,omitempty" url:"sessions,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ActiveShellSessionsResult) GetSessions() map[string]*ShellSessionInfo {
	if a == nil {
		return nil
	}
	return a.Sessions
}

func (a *ActiveShellSessionsResult) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ActiveShellSessionsResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ActiveShellSessionsResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActiveShellSessionsResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActiveShellSessionsResult) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Shell command execution status (compatible with OpenHands)
type BashCommandStatus string

const (
	BashCommandStatusRunning         BashCommandStatus = "running"
	BashCommandStatusCompleted       BashCommandStatus = "completed"
	BashCommandStatusNoChangeTimeout BashCommandStatus = "no_change_timeout"
	BashCommandStatusHardTimeout     BashCommandStatus = "hard_timeout"
	BashCommandStatusTerminated      BashCommandStatus = "terminated"
)

func NewBashCommandStatusFromString(s string) (BashCommandStatus, error) {
	switch s {
	case "running":
		return BashCommandStatusRunning, nil
	case "completed":
		return BashCommandStatusCompleted, nil
	case "no_change_timeout":
		return BashCommandStatusNoChangeTimeout, nil
	case "hard_timeout":
		return BashCommandStatusHardTimeout, nil
	case "terminated":
		return BashCommandStatusTerminated, nil
	}
	var t BashCommandStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BashCommandStatus) Ptr() *BashCommandStatus {
	return &b
}

// Shell command console record model
type ConsoleRecord struct {
	// Command prompt
	Ps1 string `json:"ps1" url:"ps1"`
	// Executed command
	Command string `json:"command" url:"command"`
	// Command output
	Output *string `json:"output,omitempty" url:"output,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConsoleRecord) GetPs1() string {
	if c == nil {
		return ""
	}
	return c.Ps1
}

func (c *ConsoleRecord) GetCommand() string {
	if c == nil {
		return ""
	}
	return c.Command
}

func (c *ConsoleRecord) GetOutput() *string {
	if c == nil {
		return nil
	}
	return c.Output
}

func (c *ConsoleRecord) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConsoleRecord) UnmarshalJSON(data []byte) error {
	type unmarshaler ConsoleRecord
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConsoleRecord(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConsoleRecord) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ResponseActiveShellSessionsResult struct {
	// Whether the operation was successful
	Success *bool `json:"success,omitempty" url:"success,omitempty"`
	// Operation result message
	Message *string `json:"message,omitempty" url:"message,omitempty"`
	// Data returned from the operation
	Data *ActiveShellSessionsResult `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ResponseActiveShellSessionsResult) GetSuccess() *bool {
	if r == nil {
		return nil
	}
	return r.Success
}

func (r *ResponseActiveShellSessionsResult) GetMessage() *string {
	if r == nil {
		return nil
	}
	return r.Message
}

func (r *ResponseActiveShellSessionsResult) GetData() *ActiveShellSessionsResult {
	if r == nil {
		return nil
	}
	return r.Data
}

func (r *ResponseActiveShellSessionsResult) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResponseActiveShellSessionsResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ResponseActiveShellSessionsResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResponseActiveShellSessionsResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResponseActiveShellSessionsResult) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ResponseShellCommandResult struct {
	// Whether the operation was successful
	Success *bool `json:"success,omitempty" url:"success,omitempty"`
	// Operation result message
	Message *string `json:"message,omitempty" url:"message,omitempty"`
	// Data returned from the operation
	Data *ShellCommandResult `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ResponseShellCommandResult) GetSuccess() *bool {
	if r == nil {
		return nil
	}
	return r.Success
}

func (r *ResponseShellCommandResult) GetMessage() *string {
	if r == nil {
		return nil
	}
	return r.Message
}

func (r *ResponseShellCommandResult) GetData() *ShellCommandResult {
	if r == nil {
		return nil
	}
	return r.Data
}

func (r *ResponseShellCommandResult) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResponseShellCommandResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ResponseShellCommandResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResponseShellCommandResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResponseShellCommandResult) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ResponseShellCreateSessionResponse struct {
	// Whether the operation was successful
	Success *bool `json:"success,omitempty" url:"success,omitempty"`
	// Operation result message
	Message *string `json:"message,omitempty" url:"message,omitempty"`
	// Data returned from the operation
	Data *ShellCreateSessionResponse `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ResponseShellCreateSessionResponse) GetSuccess() *bool {
	if r == nil {
		return nil
	}
	return r.Success
}

func (r *ResponseShellCreateSessionResponse) GetMessage() *string {
	if r == nil {
		return nil
	}
	return r.Message
}

func (r *ResponseShellCreateSessionResponse) GetData() *ShellCreateSessionResponse {
	if r == nil {
		return nil
	}
	return r.Data
}

func (r *ResponseShellCreateSessionResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResponseShellCreateSessionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ResponseShellCreateSessionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResponseShellCreateSessionResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResponseShellCreateSessionResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ResponseShellKillResult struct {
	// Whether the operation was successful
	Success *bool `json:"success,omitempty" url:"success,omitempty"`
	// Operation result message
	Message *string `json:"message,omitempty" url:"message,omitempty"`
	// Data returned from the operation
	Data *ShellKillResult `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ResponseShellKillResult) GetSuccess() *bool {
	if r == nil {
		return nil
	}
	return r.Success
}

func (r *ResponseShellKillResult) GetMessage() *string {
	if r == nil {
		return nil
	}
	return r.Message
}

func (r *ResponseShellKillResult) GetData() *ShellKillResult {
	if r == nil {
		return nil
	}
	return r.Data
}

func (r *ResponseShellKillResult) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResponseShellKillResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ResponseShellKillResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResponseShellKillResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResponseShellKillResult) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ResponseShellViewResult struct {
	// Whether the operation was successful
	Success *bool `json:"success,omitempty" url:"success,omitempty"`
	// Operation result message
	Message *string `json:"message,omitempty" url:"message,omitempty"`
	// Data returned from the operation
	Data *ShellViewResult `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ResponseShellViewResult) GetSuccess() *bool {
	if r == nil {
		return nil
	}
	return r.Success
}

func (r *ResponseShellViewResult) GetMessage() *string {
	if r == nil {
		return nil
	}
	return r.Message
}

func (r *ResponseShellViewResult) GetData() *ShellViewResult {
	if r == nil {
		return nil
	}
	return r.Data
}

func (r *ResponseShellViewResult) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResponseShellViewResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ResponseShellViewResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResponseShellViewResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResponseShellViewResult) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ResponseShellWaitResult struct {
	// Whether the operation was successful
	Success *bool `json:"success,omitempty" url:"success,omitempty"`
	// Operation result message
	Message *string `json:"message,omitempty" url:"message,omitempty"`
	// Data returned from the operation
	Data *ShellWaitResult `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ResponseShellWaitResult) GetSuccess() *bool {
	if r == nil {
		return nil
	}
	return r.Success
}

func (r *ResponseShellWaitResult) GetMessage() *string {
	if r == nil {
		return nil
	}
	return r.Message
}

func (r *ResponseShellWaitResult) GetData() *ShellWaitResult {
	if r == nil {
		return nil
	}
	return r.Data
}

func (r *ResponseShellWaitResult) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResponseShellWaitResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ResponseShellWaitResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResponseShellWaitResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResponseShellWaitResult) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ResponseShellWriteResult struct {
	// Whether the operation was successful
	Success *bool `json:"success,omitempty" url:"success,omitempty"`
	// Operation result message
	Message *string `json:"message,omitempty" url:"message,omitempty"`
	// Data returned from the operation
	Data *ShellWriteResult `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ResponseShellWriteResult) GetSuccess() *bool {
	if r == nil {
		return nil
	}
	return r.Success
}

func (r *ResponseShellWriteResult) GetMessage() *string {
	if r == nil {
		return nil
	}
	return r.Message
}

func (r *ResponseShellWriteResult) GetData() *ShellWriteResult {
	if r == nil {
		return nil
	}
	return r.Data
}

func (r *ResponseShellWriteResult) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResponseShellWriteResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ResponseShellWriteResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResponseShellWriteResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResponseShellWriteResult) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ResponseStr struct {
	// Whether the operation was successful
	Success *bool `json:"success,omitempty" url:"success,omitempty"`
	// Operation result message
	Message *string `json:"message,omitempty" url:"message,omitempty"`
	// Data returned from the operation
	Data *string `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ResponseStr) GetSuccess() *bool {
	if r == nil {
		return nil
	}
	return r.Success
}

func (r *ResponseStr) GetMessage() *string {
	if r == nil {
		return nil
	}
	return r.Message
}

func (r *ResponseStr) GetData() *string {
	if r == nil {
		return nil
	}
	return r.Data
}

func (r *ResponseStr) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResponseStr) UnmarshalJSON(data []byte) error {
	type unmarshaler ResponseStr
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResponseStr(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResponseStr) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Shell command execution result model
type ShellCommandResult struct {
	// Shell session ID
	SessionId string `json:"session_id" url:"session_id"`
	// Executed command
	Command string `json:"command" url:"command"`
	// Command execution status
	Status BashCommandStatus `json:"status" url:"status"`
	// Command execution output, only has value when status is completed
	Output *string `json:"output,omitempty" url:"output,omitempty"`
	// Console command records
	Console []*ConsoleRecord `json:"console,omitempty" url:"console,omitempty"`
	// Command execution exit code, only has value when status is completed
	ExitCode *int `json:"exit_code,omitempty" url:"exit_code,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ShellCommandResult) GetSessionId() string {
	if s == nil {
		return ""
	}
	return s.SessionId
}

func (s *ShellCommandResult) GetCommand() string {
	if s == nil {
		return ""
	}
	return s.Command
}

func (s *ShellCommandResult) GetStatus() BashCommandStatus {
	if s == nil {
		return ""
	}
	return s.Status
}

func (s *ShellCommandResult) GetOutput() *string {
	if s == nil {
		return nil
	}
	return s.Output
}

func (s *ShellCommandResult) GetConsole() []*ConsoleRecord {
	if s == nil {
		return nil
	}
	return s.Console
}

func (s *ShellCommandResult) GetExitCode() *int {
	if s == nil {
		return nil
	}
	return s.ExitCode
}

func (s *ShellCommandResult) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShellCommandResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ShellCommandResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ShellCommandResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShellCommandResult) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Shell session creation response model
type ShellCreateSessionResponse struct {
	// Unique identifier of the created shell session
	SessionId string `json:"session_id" url:"session_id"`
	// Working directory of the created session
	WorkingDir string `json:"working_dir" url:"working_dir"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ShellCreateSessionResponse) GetSessionId() string {
	if s == nil {
		return ""
	}
	return s.SessionId
}

func (s *ShellCreateSessionResponse) GetWorkingDir() string {
	if s == nil {
		return ""
	}
	return s.WorkingDir
}

func (s *ShellCreateSessionResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShellCreateSessionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ShellCreateSessionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ShellCreateSessionResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShellCreateSessionResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Process termination result model
type ShellKillResult struct {
	// Process status
	Status BashCommandStatus `json:"status" url:"status"`
	// Process return code
	Returncode int `json:"returncode" url:"returncode"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ShellKillResult) GetStatus() BashCommandStatus {
	if s == nil {
		return ""
	}
	return s.Status
}

func (s *ShellKillResult) GetReturncode() int {
	if s == nil {
		return 0
	}
	return s.Returncode
}

func (s *ShellKillResult) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShellKillResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ShellKillResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ShellKillResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShellKillResult) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Shell session information
type ShellSessionInfo struct {
	// Working directory
	WorkingDir string `json:"working_dir" url:"working_dir"`
	// Creation timestamp
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Last used timestamp
	LastUsedAt time.Time `json:"last_used_at" url:"last_used_at"`
	// Age of session in seconds
	AgeSeconds int `json:"age_seconds" url:"age_seconds"`
	// Session status
	Status string `json:"status" url:"status"`
	// Currently executing command
	CurrentCommand *string `json:"current_command,omitempty" url:"current_command,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ShellSessionInfo) GetWorkingDir() string {
	if s == nil {
		return ""
	}
	return s.WorkingDir
}

func (s *ShellSessionInfo) GetCreatedAt() time.Time {
	if s == nil {
		return time.Time{}
	}
	return s.CreatedAt
}

func (s *ShellSessionInfo) GetLastUsedAt() time.Time {
	if s == nil {
		return time.Time{}
	}
	return s.LastUsedAt
}

func (s *ShellSessionInfo) GetAgeSeconds() int {
	if s == nil {
		return 0
	}
	return s.AgeSeconds
}

func (s *ShellSessionInfo) GetStatus() string {
	if s == nil {
		return ""
	}
	return s.Status
}

func (s *ShellSessionInfo) GetCurrentCommand() *string {
	if s == nil {
		return nil
	}
	return s.CurrentCommand
}

func (s *ShellSessionInfo) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShellSessionInfo) UnmarshalJSON(data []byte) error {
	type embed ShellSessionInfo
	var unmarshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at"`
		LastUsedAt *internal.DateTime `json:"last_used_at"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = ShellSessionInfo(unmarshaler.embed)
	s.CreatedAt = unmarshaler.CreatedAt.Time()
	s.LastUsedAt = unmarshaler.LastUsedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShellSessionInfo) MarshalJSON() ([]byte, error) {
	type embed ShellSessionInfo
	var marshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at"`
		LastUsedAt *internal.DateTime `json:"last_used_at"`
	}{
		embed:      embed(*s),
		CreatedAt:  internal.NewDateTime(s.CreatedAt),
		LastUsedAt: internal.NewDateTime(s.LastUsedAt),
	}
	return json.Marshal(marshaler)
}

func (s *ShellSessionInfo) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Shell session content view result model
type ShellViewResult struct {
	// Shell session output content
	Output string `json:"output" url:"output"`
	// Shell session ID
	SessionId string `json:"session_id" url:"session_id"`
	// Console command records
	Console []*ConsoleRecord `json:"console,omitempty" url:"console,omitempty"`
	// Shell session status
	Status BashCommandStatus `json:"status" url:"status"`
	// Last executed or currently executing command
	Command *string `json:"command,omitempty" url:"command,omitempty"`
	// Command execution exit code, only has value when status is completed
	ExitCode *int `json:"exit_code,omitempty" url:"exit_code,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ShellViewResult) GetOutput() string {
	if s == nil {
		return ""
	}
	return s.Output
}

func (s *ShellViewResult) GetSessionId() string {
	if s == nil {
		return ""
	}
	return s.SessionId
}

func (s *ShellViewResult) GetConsole() []*ConsoleRecord {
	if s == nil {
		return nil
	}
	return s.Console
}

func (s *ShellViewResult) GetStatus() BashCommandStatus {
	if s == nil {
		return ""
	}
	return s.Status
}

func (s *ShellViewResult) GetCommand() *string {
	if s == nil {
		return nil
	}
	return s.Command
}

func (s *ShellViewResult) GetExitCode() *int {
	if s == nil {
		return nil
	}
	return s.ExitCode
}

func (s *ShellViewResult) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShellViewResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ShellViewResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ShellViewResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShellViewResult) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Process wait result model
type ShellWaitResult struct {
	// Process status
	Status BashCommandStatus `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ShellWaitResult) GetStatus() BashCommandStatus {
	if s == nil {
		return ""
	}
	return s.Status
}

func (s *ShellWaitResult) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShellWaitResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ShellWaitResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ShellWaitResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShellWaitResult) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Process input write result model
type ShellWriteResult struct {
	// Write status
	Status BashCommandStatus `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ShellWriteResult) GetStatus() BashCommandStatus {
	if s == nil {
		return ""
	}
	return s.Status
}

func (s *ShellWriteResult) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShellWriteResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ShellWriteResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ShellWriteResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShellWriteResult) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type ShellViewRequest struct {
	// Unique identifier of the target shell session
	Id string `json:"id" url:"-"`
}

type ShellWaitRequest struct {
	// Unique identifier of the target shell session
	Id string `json:"id" url:"-"`
	// Wait time (seconds)
	Seconds *int `json:"seconds,omitempty" url:"-"`
}

type ShellWriteToProcessRequest struct {
	// Unique identifier of the target shell session
	Id string `json:"id" url:"-"`
	// Input content to write to the process
	Input string `json:"input" url:"-"`
	// Whether to press enter key after input
	PressEnter bool `json:"press_enter" url:"-"`
}
