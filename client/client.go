// This file was auto-generated by Fern from our API Definition.

package client

import (
	context "context"
	browser "github.com/agent-infra/sandbox-sdk-go/browser"
	core "github.com/agent-infra/sandbox-sdk-go/core"
	file "github.com/agent-infra/sandbox-sdk-go/file"
	internal "github.com/agent-infra/sandbox-sdk-go/internal"
	jupyter "github.com/agent-infra/sandbox-sdk-go/jupyter"
	mcp "github.com/agent-infra/sandbox-sdk-go/mcp"
	nodejs "github.com/agent-infra/sandbox-sdk-go/nodejs"
	option "github.com/agent-infra/sandbox-sdk-go/option"
	sandbox "github.com/agent-infra/sandbox-sdk-go/sandbox"
	shell "github.com/agent-infra/sandbox-sdk-go/shell"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header

	Sandbox *sandbox.Client
	Shell   *shell.Client
	File    *file.Client
	Jupyter *jupyter.Client
	Nodejs  *nodejs.Client
	Mcp     *mcp.Client
	Browser *browser.Client
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header:  options.ToHeader(),
		Sandbox: sandbox.NewClient(opts...),
		Shell:   shell.NewClient(opts...),
		File:    file.NewClient(opts...),
		Jupyter: jupyter.NewClient(opts...),
		Nodejs:  nodejs.NewClient(opts...),
		Mcp:     mcp.NewClient(opts...),
		Browser: browser.NewClient(opts...),
	}
}

// Serve the terminal HTML page
func (c *Client) ServeTerminalTerminalGet(
	ctx context.Context,
	opts ...option.RequestOption,
) (interface{}, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"",
	)
	endpointURL := baseURL + "/terminal"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response interface{}
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
