// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/agent-infra/sandbox-sdk-go/internal"
)

type JupyterExecuteRequest struct {
	// Python code to execute
	Code string `json:"code" url:"-"`
	// Execution timeout in seconds
	Timeout *int `json:"timeout,omitempty" url:"-"`
	// Kernel name to use (e.g., 'python3', 'python3.11'). Defaults to 'python3'
	KernelName *string `json:"kernel_name,omitempty" url:"-"`
	// Session ID to maintain kernel state across requests
	SessionId *string `json:"session_id,omitempty" url:"-"`
}

// Active sessions result
type ActiveSessionsResult struct {
	// Map of session ID to session info
	Sessions map[string]*SessionInfo `json:"sessions,omitempty" url:"sessions,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ActiveSessionsResult) GetSessions() map[string]*SessionInfo {
	if a == nil {
		return nil
	}
	return a.Sessions
}

func (a *ActiveSessionsResult) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ActiveSessionsResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ActiveSessionsResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActiveSessionsResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActiveSessionsResult) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Jupyter code execution response model
type JupyterExecuteResponse struct {
	// Name of the kernel used for execution
	KernelName string `json:"kernel_name" url:"kernel_name"`
	// Session ID for this kernel instance
	SessionId string `json:"session_id" url:"session_id"`
	// Execution status: ok, error, or timeout
	Status string `json:"status" url:"status"`
	// Execution count from the kernel
	ExecutionCount *int `json:"execution_count,omitempty" url:"execution_count,omitempty"`
	// List of execution outputs
	Outputs []*JupyterOutput `json:"outputs,omitempty" url:"outputs,omitempty"`
	// The executed code
	Code string `json:"code" url:"code"`
	// Message ID from Jupyter kernel
	MsgId *string `json:"msg_id,omitempty" url:"msg_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (j *JupyterExecuteResponse) GetKernelName() string {
	if j == nil {
		return ""
	}
	return j.KernelName
}

func (j *JupyterExecuteResponse) GetSessionId() string {
	if j == nil {
		return ""
	}
	return j.SessionId
}

func (j *JupyterExecuteResponse) GetStatus() string {
	if j == nil {
		return ""
	}
	return j.Status
}

func (j *JupyterExecuteResponse) GetExecutionCount() *int {
	if j == nil {
		return nil
	}
	return j.ExecutionCount
}

func (j *JupyterExecuteResponse) GetOutputs() []*JupyterOutput {
	if j == nil {
		return nil
	}
	return j.Outputs
}

func (j *JupyterExecuteResponse) GetCode() string {
	if j == nil {
		return ""
	}
	return j.Code
}

func (j *JupyterExecuteResponse) GetMsgId() *string {
	if j == nil {
		return nil
	}
	return j.MsgId
}

func (j *JupyterExecuteResponse) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JupyterExecuteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler JupyterExecuteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = JupyterExecuteResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *j)
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties
	j.rawJSON = json.RawMessage(data)
	return nil
}

func (j *JupyterExecuteResponse) String() string {
	if len(j.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(j.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

// Jupyter service information response model
type JupyterInfoResponse struct {
	// Default kernel name
	DefaultKernel string `json:"default_kernel" url:"default_kernel"`
	// List of available kernel names
	AvailableKernels []string `json:"available_kernels,omitempty" url:"available_kernels,omitempty"`
	// Number of active sessions
	ActiveSessions int `json:"active_sessions" url:"active_sessions"`
	// Session timeout in seconds
	SessionTimeoutSeconds int `json:"session_timeout_seconds" url:"session_timeout_seconds"`
	// Maximum number of concurrent sessions
	MaxSessions int `json:"max_sessions" url:"max_sessions"`
	// Service description
	Description string `json:"description" url:"description"`
	// Kernel detection strategy
	KernelDetection string `json:"kernel_detection" url:"kernel_detection"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (j *JupyterInfoResponse) GetDefaultKernel() string {
	if j == nil {
		return ""
	}
	return j.DefaultKernel
}

func (j *JupyterInfoResponse) GetAvailableKernels() []string {
	if j == nil {
		return nil
	}
	return j.AvailableKernels
}

func (j *JupyterInfoResponse) GetActiveSessions() int {
	if j == nil {
		return 0
	}
	return j.ActiveSessions
}

func (j *JupyterInfoResponse) GetSessionTimeoutSeconds() int {
	if j == nil {
		return 0
	}
	return j.SessionTimeoutSeconds
}

func (j *JupyterInfoResponse) GetMaxSessions() int {
	if j == nil {
		return 0
	}
	return j.MaxSessions
}

func (j *JupyterInfoResponse) GetDescription() string {
	if j == nil {
		return ""
	}
	return j.Description
}

func (j *JupyterInfoResponse) GetKernelDetection() string {
	if j == nil {
		return ""
	}
	return j.KernelDetection
}

func (j *JupyterInfoResponse) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JupyterInfoResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler JupyterInfoResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = JupyterInfoResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *j)
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties
	j.rawJSON = json.RawMessage(data)
	return nil
}

func (j *JupyterInfoResponse) String() string {
	if len(j.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(j.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

// Jupyter execution output model
type JupyterOutput struct {
	// Type of output: stream, execute_result, display_data, or error
	OutputType string `json:"output_type" url:"output_type"`
	// Stream name (stdout/stderr) for stream outputs
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Text content for stream outputs
	Text *string `json:"text,omitempty" url:"text,omitempty"`
	// Output data for execute_result/display_data
	Data map[string]interface{} `json:"data,omitempty" url:"data,omitempty"`
	// Output metadata
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	// Execution count for execute_result
	ExecutionCount *int `json:"execution_count,omitempty" url:"execution_count,omitempty"`
	// Error name for error outputs
	Ename *string `json:"ename,omitempty" url:"ename,omitempty"`
	// Error value for error outputs
	Evalue *string `json:"evalue,omitempty" url:"evalue,omitempty"`
	// Error traceback for error outputs
	Traceback []string `json:"traceback,omitempty" url:"traceback,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (j *JupyterOutput) GetOutputType() string {
	if j == nil {
		return ""
	}
	return j.OutputType
}

func (j *JupyterOutput) GetName() *string {
	if j == nil {
		return nil
	}
	return j.Name
}

func (j *JupyterOutput) GetText() *string {
	if j == nil {
		return nil
	}
	return j.Text
}

func (j *JupyterOutput) GetData() map[string]interface{} {
	if j == nil {
		return nil
	}
	return j.Data
}

func (j *JupyterOutput) GetMetadata() map[string]interface{} {
	if j == nil {
		return nil
	}
	return j.Metadata
}

func (j *JupyterOutput) GetExecutionCount() *int {
	if j == nil {
		return nil
	}
	return j.ExecutionCount
}

func (j *JupyterOutput) GetEname() *string {
	if j == nil {
		return nil
	}
	return j.Ename
}

func (j *JupyterOutput) GetEvalue() *string {
	if j == nil {
		return nil
	}
	return j.Evalue
}

func (j *JupyterOutput) GetTraceback() []string {
	if j == nil {
		return nil
	}
	return j.Traceback
}

func (j *JupyterOutput) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JupyterOutput) UnmarshalJSON(data []byte) error {
	type unmarshaler JupyterOutput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = JupyterOutput(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *j)
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties
	j.rawJSON = json.RawMessage(data)
	return nil
}

func (j *JupyterOutput) String() string {
	if len(j.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(j.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

type ResponseActiveSessionsResult struct {
	// Whether the operation was successful
	Success *bool `json:"success,omitempty" url:"success,omitempty"`
	// Operation result message
	Message *string `json:"message,omitempty" url:"message,omitempty"`
	// Data returned from the operation
	Data *ActiveSessionsResult `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ResponseActiveSessionsResult) GetSuccess() *bool {
	if r == nil {
		return nil
	}
	return r.Success
}

func (r *ResponseActiveSessionsResult) GetMessage() *string {
	if r == nil {
		return nil
	}
	return r.Message
}

func (r *ResponseActiveSessionsResult) GetData() *ActiveSessionsResult {
	if r == nil {
		return nil
	}
	return r.Data
}

func (r *ResponseActiveSessionsResult) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResponseActiveSessionsResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ResponseActiveSessionsResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResponseActiveSessionsResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResponseActiveSessionsResult) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ResponseJupyterExecuteResponse struct {
	// Whether the operation was successful
	Success *bool `json:"success,omitempty" url:"success,omitempty"`
	// Operation result message
	Message *string `json:"message,omitempty" url:"message,omitempty"`
	// Data returned from the operation
	Data *JupyterExecuteResponse `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ResponseJupyterExecuteResponse) GetSuccess() *bool {
	if r == nil {
		return nil
	}
	return r.Success
}

func (r *ResponseJupyterExecuteResponse) GetMessage() *string {
	if r == nil {
		return nil
	}
	return r.Message
}

func (r *ResponseJupyterExecuteResponse) GetData() *JupyterExecuteResponse {
	if r == nil {
		return nil
	}
	return r.Data
}

func (r *ResponseJupyterExecuteResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResponseJupyterExecuteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ResponseJupyterExecuteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResponseJupyterExecuteResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResponseJupyterExecuteResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ResponseJupyterInfoResponse struct {
	// Whether the operation was successful
	Success *bool `json:"success,omitempty" url:"success,omitempty"`
	// Operation result message
	Message *string `json:"message,omitempty" url:"message,omitempty"`
	// Data returned from the operation
	Data *JupyterInfoResponse `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ResponseJupyterInfoResponse) GetSuccess() *bool {
	if r == nil {
		return nil
	}
	return r.Success
}

func (r *ResponseJupyterInfoResponse) GetMessage() *string {
	if r == nil {
		return nil
	}
	return r.Message
}

func (r *ResponseJupyterInfoResponse) GetData() *JupyterInfoResponse {
	if r == nil {
		return nil
	}
	return r.Data
}

func (r *ResponseJupyterInfoResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResponseJupyterInfoResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ResponseJupyterInfoResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResponseJupyterInfoResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResponseJupyterInfoResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Active session information
type SessionInfo struct {
	// Kernel name
	KernelName string `json:"kernel_name" url:"kernel_name"`
	// Last used timestamp
	LastUsed float64 `json:"last_used" url:"last_used"`
	// Age of session in seconds
	AgeSeconds int `json:"age_seconds" url:"age_seconds"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SessionInfo) GetKernelName() string {
	if s == nil {
		return ""
	}
	return s.KernelName
}

func (s *SessionInfo) GetLastUsed() float64 {
	if s == nil {
		return 0
	}
	return s.LastUsed
}

func (s *SessionInfo) GetAgeSeconds() int {
	if s == nil {
		return 0
	}
	return s.AgeSeconds
}

func (s *SessionInfo) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SessionInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler SessionInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SessionInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SessionInfo) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
